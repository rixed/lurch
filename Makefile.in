# Configuration

VERSION = @PACKAGE_VERSION@

OCAMLC   = OCAMLRUNPARAM= ocamlfind ocamlc
OCAMLOPT = OCAMLRUNPARAM= ocamlfind ocamlopt
OCAMLDEP = OCAMLRUNPARAM= ocamlfind ocamldep
JS_OF_OCAML = js_of_ocaml
QTEST    = qtest

WARNS =
OCAMLOPTFLAGS = @OCAMLOPTFLAGS@ -I src $(WARNS) -thread -annot -bin-annot
OCAMLCFLAGS = @OCAMLCFLAGS@ -I src $(WARNS) -annot

ifdef NDEBUG
OCAMLOPTFLAGS += -noassert -O2
OCAMLCFLAGS += -noassert -O2
else
OCAMLOPTFLAGS += -g
OCAMLCFLAGS += -g
endif

PACKAGES_SERVER = \
	batteries,cgi,cmdliner,findlib,js_of_ocaml-ppx_deriving_json,postgresql,syslog
PACKAGES_CLIENT = \
	js_of_ocaml,js_of_ocaml.ppx,js_of_ocaml-ppx_deriving_json,ocaml-vdom

# `make` should compile and install everything, yet to build the deb or
# tarball RmAdmin is not needed:
PACKAGED_BIN = www/lurch
INSTALLED_BIN = $(PACKAGED_BIN)
INSTALLED_LIB =
INSTALLED_WWW = www/spa.js www/favicon.png

INSTALLED = $(INSTALLED_BIN) $(INSTALLED_LIB) $(INSTALLED_WWW)

prefix = @prefix@
exec_prefix = @exec_prefix@
bin_dir ?= @bindir@

# Where to install systemd configuration
systemd_dir ?= /lib/systemd/system
sysconf_dir ?= /etc/default

all: $(INSTALLED)

# Generic rules

.SUFFIXES: .ml .mli .cmi .cmx .cmo .cmxs .cmt .top .html .adoc .js
.PHONY: clean clean-temp all dep doc \
        check unit-check \
        install install-systemd uninstall reinstall \
        docker docker-in-docker

SERVER_SOURCES = \
	src/LurchVersion.ml \
	src/LurchApiTypes.ml \
	src/LurchCommandLanguage.ml \
	src/LurchServerLib.ml \
	src/LurchServerFiles.ml \
	src/LurchServerDb.ml \
	src/LurchServerCGroup.ml \
	src/LurchServerChroot.ml \
	src/LurchServerDocker.ml \
	src/LurchServerCommand.ml \
	src/LurchServerHttpd.ml \
	src/LurchServer.ml

CLIENT_SOURCES = \
	src/LurchVersion.ml \
	src/LurchApiTypes.ml \
	src/LurchCommandLanguage.ml \
	src/LurchClientLib.ml \
	src/LurchClientCommand.ml \
	src/LurchClientProgram.ml \
	src/LurchClientState.ml \
	src/LurchClientViews.ml \
	src/LurchClient.ml

TESTONLY_SOURCES =

SOURCES = $(sort \
	$(SERVER_SOURCES) \
	$(CLIENT_SOURCES) \
	$(TESTONLY_SOURCES) \
)

# Generic rules:

%.cmx %.cmt: %.ml
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -package '$(PACKAGES_SERVER)' -c $<

%.html: %.adoc
	asciidoc -a data-uri -a icons -a toc -a max-width=55em --theme volnitsky -o $@ $<

%.cmi: %.cmx
	@true

# JS client uses js_of_ocaml:
%.cmo %.cmt: %.ml
	$(OCAMLC) $(OCAMLCFLAGS) -package '$(PACKAGES_CLIENT)' -c $<

# Dependencies

dep:
	$(RM) .depend
	$(MAKE) .depend

.depend: $(SOURCES)
	$(OCAMLDEP) -I src -package '$(PACKAGES_SERVER)' $(filter %.ml, $(SOURCES)) $(filter %.mli, $(SOURCES)) > $@

include .depend

# Some useful docker image:
docker-in-docker: docker/Dockerfile-docker-in-docker
	docker build -t rixed/lurch-docker-in-docker:latest -f $< docker/
	@if test `whoami` = rixed; then \
	   read -p "Also push rixed/lurch-docker-in-docker:latest to docker hub? [yn]" PUSH ;\
	   if test $$PUSH = y -o $$PUSH = Y; then \
	     docker push rixed/lurch-docker-in-docker:latest ;\
	   fi ;\
	 fi

WWW_SOURCES = www/lurch www/run-lurch www/spa.js www/index.html www/main.css

docker: \
		docker/Dockerfile docker/start docker/lighttpd.conf \
		db/schema.sql $(WWW_SOURCES)
	$(RM) -r docker/www
	mkdir -p docker/www
	cp $(WWW_SOURCES) docker/www
	cp db/schema.sql docker/
	strip docker/www/lurch
	docker build -t rixed/lurch -f $< docker/
	@if test `whoami` = rixed; then \
	   read -p "Also push rixed/lurch-docker-in-docker:latest to docker hub? [yn]" PUSH ;\
	   if test $$PUSH = y -o $$PUSH = Y; then \
	     docker push rixed/lurch-docker-in-docker:latest ;\
	   fi ;\
	 fi

# Documentation

# Compile

www/lurch: \
		$(patsubst %.mli,%.cmi,$(filter %.mli, $(SERVER_SOURCES))) \
		$(patsubst %.ml,%.cmx,$(filter %.ml, $(SERVER_SOURCES)))
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -linkpkg -package '$(PACKAGES_SERVER)' $(filter %.cmx, $^) -o $@

src/spa.byte: \
		$(patsubst %.mli,%.cmi,$(filter %.mli, $(CLIENT_SOURCES))) \
		$(patsubst %.ml,%.cmo,$(filter %.ml, $(CLIENT_SOURCES)))
	$(OCAMLC) $(OCAMLCFLAGS) -package '$(PACKAGES_CLIENT)' -linkpkg -o $@ $^

www/spa.js: src/spa.byte
	mkdir -p www
	$(JS_OF_OCAML) -o $@ --no-sourcemap --pretty $^

src/LurchCompilConfig.ml: Makefile
	@echo '(* Generated by Makefile - edition is futile *)' > $@
	@echo 'let ocaml_version = "@OCAMLVERSION@"' >> $@
	@echo 'let build_path = "$(PATH)"' >> $@
	@echo 'let ocamlpath = "$(OCAMLPATH)"' >> $@
	@echo 'let build_date = "$(shell date -R)"' >> $@
	@echo 'let build_host = "$(shell hostname)"' >> $@

www/favicon.png: src/lurch.png
	convert $< -geometry 64x64 $@

# Tests

TESTABLE_SOURCES = \
	src/LurchCommandLanguage.ml \
	src/LurchServerLib.ml

# For the actual command line building all_tests.opt:
LINKED_FOR_TESTS = \
	src/LurchCommandLanguage.ml \
	src/LurchServerLib.ml

src/all_tests.ml: $(TESTABLE_SOURCES)
	$(QTEST) --shuffle -o $@ extract $^

all_tests.opt: \
		$(filter %.cmx,$(LINKED_FOR_TESTS:.ml=.cmx)) \
		src/all_tests.ml
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -linkpkg -package batteries,qcheck,str,cgi $(filter %.cmx, $^) $(filter %.a, $^) $(filter %.ml, $^) -o $@

check: unit-check

unit-check: all_tests.opt
	@TZ=CET OCAMLRUNPARAM=b ./all_tests.opt -bt

# Installation

install: $(INSTALLED)
	@echo 'Installing binaries into $(bin_dir)'
	install -d $(bin_dir)
	install $(INSTALLED_BIN) $(bin_dir)/
	for f in $(INSTALLED_BIN); do \
	   strip $(bin_dir)/$$(basename $$f) || true ;\
	 done

install-systemd:
	@echo 'Installing systemd configuration into $(DESTDIR)$(systemd_dir)'
	install -d $(DESTDIR)$(systemd_dir)
	install -d $(DESTDIR)$(sysconf_dir)
	cp systemd/*.target systemd/*.service $(DESTDIR)$(systemd_dir)
	cp systemd/lurch $(DESTDIR)$(sysconf_dir)

uninstall: uninstall-bundle
	@echo 'Uninstalling binaries and libraries bundle'
	for f in $(INSTALLED_BIN); do \
	   rm $(bin_dir)/$$(basename $$f) ;\
	 done

reinstall: uninstall install

# Cleaning

clean-dist: clean
	$(RM) src/LurchVersion.ml

clean:
	$(RM) src/*.s src/*.annot src/*.cmt src/*.cmti src/*.o
	$(RM) src/*.cmx src/*.cmxa src/*.cmxs src/*.cmi src/*.cmo src/*.cma
	$(RM) *.opt src/all_tests.* perf.data* gmon.out
	$(RM) src/oUnit-anon.cache src/qtest.targets.log
	$(RM) .depend src/*.opt src/*.byte
	$(RM) www/lurch www/spa.js www/favicon.png
